import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3

# Initialize SQLite database
conn = sqlite3.connect('blood_donation1.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS donors
             (id INTEGER PRIMARY KEY,
              name TEXT,
              blood_type TEXT,
              contact_number TEXT,
              blood_amount INTEGER,
              age INTEGER)''')
c.execute('''CREATE TABLE IF NOT EXISTS recipients
             (id INTEGER PRIMARY KEY,
              name TEXT,
              blood_type TEXT,
              contact_number TEXT,
              blood_amount INTEGER,
              age INTEGER)''')
conn.commit()

# Function to add a donor
def add_donor():
    name = entry_donor_name.get()
    blood_type = entry_donor_blood_type.get()
    contact_number = entry_donor_contact_number.get()
    blood_amount = entry_donor_blood_amount.get()
    age = entry_donor_age.get()
    c.execute("INSERT INTO donors (name, blood_type, contact_number, blood_amount, age) VALUES (?, ?, ?, ?, ?)",
              (name, blood_type, contact_number, blood_amount, age))
    conn.commit()
    update_tree()
    update_blood_counts()
    messagebox.showinfo("Success", "Donor added successfully!")

# Function to delete selected donor
def delete_donor():
    selected_item = tree.selection()
    if selected_item:
        donor_id = tree.item(selected_item, 'values')[0]
        c.execute("DELETE FROM donors WHERE id=?", (donor_id,))
        conn.commit()
        update_tree()
        update_blood_counts()
        messagebox.showinfo("Success", "Donor deleted successfully!")
    else:
        messagebox.showerror("Error", "Please select a donor to delete.")

# Function to request blood from a recipient
def request_blood():
    recipient_id = generate_recipient_id()
    name = entry_recipient_name.get()
    blood_type = entry_recipient_blood_type.get()
    contact_number = entry_recipient_contact_number.get()
    blood_amount = entry_recipient_blood_amount.get()
    age = entry_recipient_age.get()

    # Check if blood type is available
    c.execute("SELECT blood_amount FROM donors WHERE blood_type=?", (blood_type,))
    available_blood_amount = c.fetchone()

    if available_blood_amount:
        available_blood_amount = available_blood_amount[0]

        if int(blood_amount) <= available_blood_amount:
            # Update available blood amount for the blood type
            updated_amount = available_blood_amount - int(blood_amount)
            if updated_amount == 0:
                # Remove blood type entry if all is requested
                c.execute("DELETE FROM donors WHERE blood_type=?", (blood_type,))
            else:
                c.execute("UPDATE donors SET blood_amount=? WHERE blood_type=?", (updated_amount, blood_type))

            c.execute("INSERT INTO recipients (id, name, blood_type, contact_number, blood_amount, age) VALUES (?, ?, ?, ?, ?, ?)",
                      (recipient_id, name, blood_type, contact_number, blood_amount, age))
            conn.commit()
            update_tree()
            update_blood_counts()
            messagebox.showinfo("Success", "Recipient added successfully!")
        else:
            messagebox.showerror("Error", f"Requested amount exceeds available blood amount for blood type {blood_type}.")
    else:
        messagebox.showerror("Error", f"Blood type {blood_type} not available.")

# Function to generate a unique recipient ID
def generate_recipient_id():
    c.execute("SELECT MAX(id) FROM recipients")
    max_id = c.fetchone()[0]
    return max_id + 1 if max_id else 1

# Function to update the tree view
def update_tree():
    tree.delete(*tree.get_children())
    c.execute("SELECT * FROM donors")
    for row in c.fetchall():
        tree.insert('', 'end', values=row)

# Function to update the blood type counts
def update_blood_counts():
    counts = {}
    c.execute("SELECT blood_type, SUM(blood_amount) FROM donors GROUP BY blood_type")
    for row in c.fetchall():
        blood_type, total_amount = row
        counts[blood_type] = total_amount

    # Update label text
    blood_count_label.config(text="Available Blood Types and Amounts:")
    blood_count_list.delete(1.0, tk.END)  # Clear existing text
    for blood_type, amount in counts.items():
        blood_count_list.insert(tk.END, f"{blood_type}: {amount} ml\n")

# Create the main window
root = tk.Tk()
root.title("Blood Donation System")
root.attributes('-fullscreen', True)

# Donor Section
frame_donor = ttk.LabelFrame(root, text="Donor")
frame_donor.grid(row=0, column=0, padx=10, pady=10, sticky='nsew')

label_donor_name = ttk.Label(frame_donor, text="Name:")
label_donor_name.grid(row=0, column=0)
entry_donor_name = ttk.Entry(frame_donor)
entry_donor_name.grid(row=0, column=1)

label_donor_blood_type = ttk.Label(frame_donor, text="Blood Type:")
label_donor_blood_type.grid(row=1, column=0)
entry_donor_blood_type = ttk.Entry(frame_donor)
entry_donor_blood_type.grid(row=1, column=1)

label_donor_contact_number = ttk.Label(frame_donor, text="Contact Number:")
label_donor_contact_number.grid(row=2, column=0)
entry_donor_contact_number = ttk.Entry(frame_donor)
entry_donor_contact_number.grid(row=2, column=1)

label_donor_blood_amount = ttk.Label(frame_donor, text="Blood Amount:")
label_donor_blood_amount.grid(row=3, column=0)
entry_donor_blood_amount = ttk.Entry(frame_donor)
entry_donor_blood_amount.grid(row=3, column=1)

label_donor_age = ttk.Label(frame_donor, text="Age:")
label_donor_age.grid(row=4, column=0)
entry_donor_age = ttk.Entry(frame_donor)
entry_donor_age.grid(row=4, column=1)

button_add_donor = ttk.Button(frame_donor, text="Add Donor", command=add_donor)
button_add_donor.grid(row=5, columnspan=2)

button_delete_donor = ttk.Button(frame_donor, text="Delete Donor", command=delete_donor)
button_delete_donor.grid(row=6, columnspan=2)

# Recipient Section
frame_recipient = ttk.LabelFrame(root, text="Recipient")
frame_recipient.grid(row=0, column=1, padx=10, pady=10, sticky='nsew')

label_recipient_name = ttk.Label(frame_recipient, text="Name:")
label_recipient_name.grid(row=0, column=0)
entry_recipient_name = ttk.Entry(frame_recipient)
entry_recipient_name.grid(row=0, column=1)

label_recipient_blood_type = ttk.Label(frame_recipient, text="Blood Type:")
label_recipient_blood_type.grid(row=1, column=0)
entry_recipient_blood_type = ttk.Entry(frame_recipient)
entry_recipient_blood_type.grid(row=1, column=1)

label_recipient_contact_number = ttk.Label(frame_recipient, text="Contact Number:")
label_recipient_contact_number.grid(row=2, column=0)
entry_recipient_contact_number = ttk.Entry(frame_recipient)
entry_recipient_contact_number.grid(row=2, column=1)

label_recipient_blood_amount = ttk.Label(frame_recipient, text="Blood Amount:")
label_recipient_blood_amount.grid(row=3, column=0)
entry_recipient_blood_amount = ttk.Entry(frame_recipient)
entry_recipient_blood_amount.grid(row=3, column=1)

label_recipient_age = ttk.Label(frame_recipient, text="Age:")
label_recipient_age.grid(row=4, column=0)
entry_recipient_age = ttk.Entry(frame_recipient)
entry_recipient_age.grid(row=4, column=1)

button_request_blood = ttk.Button(frame_recipient, text="Request Blood", command=request_blood)
button_request_blood.grid(row=5, columnspan=2)

# Create a tree view
tree = ttk.Treeview(root, columns=("ID", "Name", "Blood Type", "Contact Number", "Blood Amount", "Age"), show="headings")
tree.heading("ID", text="ID")
tree.heading("Name", text="Name")
tree.heading("Blood Type", text="Blood Type")
tree.heading("Contact Number", text="Contact Number")
tree.heading("Blood Amount", text="Blood Amount")
tree.heading("Age", text="Age")
tree.grid(row=1, column=0, columnspan=2, padx=10, pady=10, sticky='nsew')

# Set column widths
tree.column("ID", width=30)
tree.column("Name", width=150)
tree.column("Blood Type", width=80)
tree.column("Contact Number", width=120)
tree.column("Blood Amount", width=80)
tree.column("Age", width=50)

# Make the tree view scrollable
scrollbar = ttk.Scrollbar(root, orient="vertical", command=tree.yview)
scrollbar.grid(row=1, column=2, sticky='ns')
tree.configure(yscrollcommand=scrollbar.set)

# Right Side: Display Available Blood Types
frame_blood_counts = ttk.LabelFrame(root, text="Available Blood Types")
frame_blood_counts.grid(row=0, column=2, padx=10, pady=10, sticky='nsew')

blood_count_label = ttk.Label(frame_blood_counts, text="Available Blood Types and Amounts:")
blood_count_label.grid(row=0, column=0, sticky='w')

blood_count_list = tk.Text(frame_blood_counts, wrap='word', height=10, width=20)
blood_count_list.grid(row=1, column=0, padx=5, pady=5)

# Configure row and column weights
root.rowconfigure(0, weight=1)
root.columnconfigure(0, weight=1)
root.columnconfigure(1, weight=1)
root.columnconfigure(2, weight=1)

# Update the tree view with existing entries
update_tree()

# Update blood type counts
update_blood_counts()

# Start the main event loop
root.mainloop()
